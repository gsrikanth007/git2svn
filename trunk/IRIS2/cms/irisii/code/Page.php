<?php

class Page extends SiteTree {

	/**
     * Array of additional database fields declared as 'field name' => 'field type' pairs
     * @var array
     */
    public static $db = array();

    /**
     * Array of related Page objects
     * @var array
     */
	public static $has_one = array();

    /**
     * Page icon path
     * @var string
     */
    public static $icon = 'themes/eionet/images/tree/page';

    /**
	 * Delimit breadcrumb links generated by BreadCrumbs()
	 * @var string
	 */
	public static $breadcrumbs_delimiter = '';


    /**
     * Method to retrieve Eionet header navigation
     *
     * @return string
     */
    public function HeaderNavigation() {
        return file_get_contents('http://www.eionet.europa.eu/dropdownmenus.txt');
    }

    /**
	 * Return a breadcrumb trail to this page. Excludes "hidden" pages (with ShowInMenus=0).
	 *
	 * @param int $maxDepth The maximum depth to traverse.
	 * @param boolean $unlinked Do not make page names links
	 * @param string $stopAtPageType ClassName of a page to stop the upwards traversal.
	 * @param boolean $showHidden Include pages marked with the attribute ShowInMenus = 0
	 * @return string The breadcrumb trail.
	 */
	public function Breadcrumbs($maxDepth = 20, $stopAtPageType = false, $showHidden = false) {
		$page = $this;
		$parts = array();
        
        while(
			$page
 			&& (!$maxDepth || sizeof($parts) < $maxDepth)
 			&& (!$stopAtPageType || $page->ClassName != $stopAtPageType)
 		) {
			if($showHidden || $page->ShowInMenus || ($page->ID == $this->ID)) {
				if($page->URLSegment == 'home') $hasHome = true;

                // Use menu title if exists, otherwise page title
                $title = $abbreviatedTitle = ($page->MenuTitle) ? Convert::raw2xml($page->MenuTitle) : Convert::raw2xml($page->Title);

                // Truncate breadcrumb title
                if(strlen($abbreviatedTitle) > 26) {
                    $abbreviatedTitle = substr($title, 0, 26);
                    $abbreviatedTitle = substr($abbreviatedTitle, 0, strrpos($abbreviatedTitle, ' '));
                    $abbreviatedTitle .= ' ...';
                }
                
				if(($page->ID == $this->ID)) {
                    $parts[] = "<div class='breadcrumbitemlast'>{$abbreviatedTitle}</div>";
                    
				} else {
                    $parts[] = "<div class='breadcrumbitem'><a href='{$page->Link()}' title='{$title}'>{$abbreviatedTitle}</a></div>";
				}
			}
			$page = $page->Parent;
		}

        // Include home page breadcrumb if it isn't already in trail
        if(!$hasHome) {
            if(($page = Page::get_by_link('home'))) {
                $title = ($page->MenuTitle) ? Convert::raw2xml($page->MenuTitle) : Convert::raw2xml($page->Title);
                $parts[] = "<div class='breadcrumbitem'><a href='{$page->Link()}' title='{$title}'>{$title}</a></div>";
            }
        }

		return implode(self::$breadcrumbs_delimiter, array_reverse($parts));
	}

}

class Page_Controller extends ContentController {

    const SITE_SEARCH_URL   = 'home/search?q=%s&start=%s';
    const GOOGLE_SEARCH_URL = 'http://ajax.googleapis.com/ajax/services/search/web?rsz=large&v=1.0&q=%s&start=%s';
    const SEARCH_RESULT     = '<div class="searchResult"><h4><a href="%s" title="%s">%s</a></h4><p>%s</p></div>';
    const PAGINATION_LINK   = '<a href="%s" title="Page %s">%s</a>';
    const PAGINATION_ACTIVE = '<span>%s</span>';

	public static $allowed_actions = array ();


    /**
     * Method to initialise Page_Controller instance
     *
     * @return void
     */
	public function init() {
		parent::init();
	}

    /**
     * Method to render left navigation
     *
     * @return string
     */
    public function LeftNavigation() {
		$pageId = (isset($_GET['page'])) ? (int)$_GET['page'] : 0;
        
        if(($page = DataObject::get_by_id('Page', $pageId))) {
            Director::set_current_page($page);
        }

        return $this->renderWith('LeftNavigation');
    }

    /**
     * Method to query Google and display search results
     * 
     * @return void
     */
    public function search($request) {
        // Prepare Google search request parameters
        $query = urlencode("{$_SERVER['HTTP_HOST']} {$_GET['q']}");
        $offset = isset($_GET['start']) ? (int)$_GET['start'] : '0';
        $response = file_get_contents(sprintf(self::GOOGLE_SEARCH_URL, $query, $offset));
        
        // Decode JSON response and prepare view content
        $response = json_decode($response);
        $searchResults = $pages = array();

        // Build list of search results
        foreach($response->responseData->results as $result)
            $searchResults[] = sprintf(self::SEARCH_RESULT, $result->unescapedUrl, $result->titleNoFormatting, $result->titleNoFormatting, $result->content);

        // Prepare pagination options
        $resultsCount = isset($response->responseData->cursor->estimatedResultCount) ? $response->responseData->cursor->estimatedResultCount : 0;
        $currentPageIndex = $response->responseData->cursor->currentPageIndex;

        if($resultsCount) {
            // Previous pagination option
            if($currentPageIndex > 0) {
                $page = $response->responseData->cursor->pages[$currentPageIndex - 1];
                $url = sprintf(self::SITE_SEARCH_URL, urlencode($_GET['q']), $page->start);
                $pages[] = sprintf(self::PAGINATION_LINK, $url, '&lt;&lt; Previous', '&lt;&lt; Previous');

            } else {
                $pages[] = sprintf(self::PAGINATION_ACTIVE, '&lt;&lt; Previous');
            }

            // Page pagination option
            foreach($response->responseData->cursor->pages as $index => $page) {
                if($currentPageIndex == $index) {
                    $pages[] = sprintf(self::PAGINATION_ACTIVE, $page->label);

                } else {
                    $url = sprintf(self::SITE_SEARCH_URL, urlencode($_GET['q']), $page->start);
                    $pages[] = sprintf(self::PAGINATION_LINK, $url, $page->label, $page->label);
                }
            }

            // Next pagination option
            if($currentPageIndex < 7 && count($response->responseData->cursor->pages) > 1) {
                $page = $response->responseData->cursor->pages[$currentPageIndex + 1];
                $url = sprintf(self::SITE_SEARCH_URL, urlencode($_GET['q']), $page->start);
                $pages[] = sprintf(self::PAGINATION_LINK, $url, 'Next &gt;&gt;', 'Next &gt;&gt;');

            } else {
                $pages[] = sprintf(self::PAGINATION_ACTIVE, 'Next &gt;&gt;');
            }
        }

        return $this->customise(array(
            'Title' => 'Search Results',
            'SearchQuery' => Convert::raw2xml($_GET['q']),
            'ResultsCount' => $resultsCount,
            'MoreResultsUrl' => $response->responseData->cursor->moreResultsUrl,
            'SearchResults' => implode("\r\n", $searchResults),
            'Pagination' => implode("\r\n", $pages),
        ))->renderWith(array('SearchPage', 'Page'));
    }
    
}